%YAML:1.0

#common parameters
imu_topic: "/back/imu"
image_topic: "/back/fisheye1/image_raw"
output_path: "/home/rmua3/vins_output/"

#camera calibration 
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 848
image_height: 800
projection_parameters:
   k2: -0.010449030494774749
   k3: 0.058128854104242414
   k4: -0.05820673642681748
   k5: 0.013723823186363473
   u0: 414.11453828629004
   v0: 396.06821146627374
   mu: 285.87821592872666
   mv: 285.8955602156196

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -0.999891,  -0.0104525,  0.0104421,
           0.0104582,  -0.999945,  0.000490038, 
           0.0104365,  0.000599191,  0.999945]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0106988288462162,  -0.000111902991193347,  -0.000111670000478625]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 40            # min distance between two features 
freq: 20                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
use_fast: 1             # if it equals to 1, we extract and track fast feature, otherwise we use GFTT from opencv
use_rgbd: 0             # if using rgbd camera, turn on it. Depth residuals will be added to sliding window optimization and initialization
min_fast_resp: 10       # min response of fast feature

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 15.0 # keyframe selection threshold (pixel)
reproj_threshold: 10.0

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0020265256586831514           # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.00026962089179219693          # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00017308094267094056          # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.764660075119516e-06           # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/rmua3/vins_output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
