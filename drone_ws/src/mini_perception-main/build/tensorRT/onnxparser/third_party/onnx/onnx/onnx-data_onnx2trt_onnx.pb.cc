// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data_onnx2trt_onnx.proto

#include "onnx/onnx-data_onnx2trt_onnx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseTensorProto_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto;
namespace onnx2trt_onnx {
class SequenceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SequenceProto> _instance;
} _SequenceProto_default_instance_;
class MapProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapProto> _instance;
} _MapProto_default_instance_;
}  // namespace onnx2trt_onnx
static void InitDefaultsscc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onnx2trt_onnx::_SequenceProto_default_instance_;
    new (ptr) ::onnx2trt_onnx::SequenceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::onnx2trt_onnx::_MapProto_default_instance_;
    new (ptr) ::onnx2trt_onnx::MapProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onnx2trt_onnx::SequenceProto::InitAsDefaultInstance();
  ::onnx2trt_onnx::MapProto::InitAsDefaultInstance();
}

ONNX_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto}, {
      &scc_info_TensorProto_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto.base,
      &scc_info_SparseTensorProto_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, name_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, elem_type_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, tensor_values_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, sparse_tensor_values_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, sequence_values_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, map_values_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, name_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, key_type_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, keys_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, string_keys_),
  PROTOBUF_FIELD_OFFSET(::onnx2trt_onnx::MapProto, values_),
  0,
  2,
  ~0u,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::onnx2trt_onnx::SequenceProto)},
  { 17, 27, sizeof(::onnx2trt_onnx::MapProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onnx2trt_onnx::_SequenceProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onnx2trt_onnx::_MapProto_default_instance_),
};

const char descriptor_table_protodef_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"onnx/onnx-data_onnx2trt_onnx.proto\022\ron"
  "nx2trt_onnx\032 onnx/onnx_onnx2trt_onnx-ml."
  "proto\"\330\002\n\rSequenceProto\022\014\n\004name\030\001 \001(\t\022\021\n"
  "\telem_type\030\002 \001(\005\0221\n\rtensor_values\030\003 \003(\0132"
  "\032.onnx2trt_onnx.TensorProto\022>\n\024sparse_te"
  "nsor_values\030\004 \003(\0132 .onnx2trt_onnx.Sparse"
  "TensorProto\0225\n\017sequence_values\030\005 \003(\0132\034.o"
  "nnx2trt_onnx.SequenceProto\022+\n\nmap_values"
  "\030\006 \003(\0132\027.onnx2trt_onnx.MapProto\"O\n\010DataT"
  "ype\022\r\n\tUNDEFINED\020\000\022\n\n\006TENSOR\020\001\022\021\n\rSPARSE"
  "_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007\n\003MAP\020\004\"{\n\010MapP"
  "roto\022\014\n\004name\030\001 \001(\t\022\020\n\010key_type\030\002 \001(\005\022\014\n\004"
  "keys\030\003 \003(\003\022\023\n\013string_keys\030\004 \003(\014\022,\n\006value"
  "s\030\005 \001(\0132\034.onnx2trt_onnx.SequenceProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_deps[1] = {
  &::descriptor_table_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_sccs[1] = {
  &scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_once;
static bool descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto = {
  &descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_initialized, descriptor_table_protodef_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto, "onnx/onnx-data_onnx2trt_onnx.proto", 557,
  &descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_once, descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_sccs, descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::offsets,
  file_level_metadata_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto, 2, file_level_enum_descriptors_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto, file_level_service_descriptors_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto), true);
namespace onnx2trt_onnx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceProto_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto);
  return file_level_enum_descriptors_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto[0];
}
bool SequenceProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SequenceProto_DataType SequenceProto::UNDEFINED;
constexpr SequenceProto_DataType SequenceProto::TENSOR;
constexpr SequenceProto_DataType SequenceProto::SPARSE_TENSOR;
constexpr SequenceProto_DataType SequenceProto::SEQUENCE;
constexpr SequenceProto_DataType SequenceProto::MAP;
constexpr SequenceProto_DataType SequenceProto::DataType_MIN;
constexpr SequenceProto_DataType SequenceProto::DataType_MAX;
constexpr int SequenceProto::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SequenceProto::InitAsDefaultInstance() {
}
class SequenceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SequenceProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void SequenceProto::clear_tensor_values() {
  tensor_values_.Clear();
}
void SequenceProto::clear_sparse_tensor_values() {
  sparse_tensor_values_.Clear();
}
SequenceProto::SequenceProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx2trt_onnx.SequenceProto)
}
SequenceProto::SequenceProto(const SequenceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tensor_values_(from.tensor_values_),
      sparse_tensor_values_(from.sparse_tensor_values_),
      sequence_values_(from.sequence_values_),
      map_values_(from.map_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  elem_type_ = from.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx2trt_onnx.SequenceProto)
}

void SequenceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  elem_type_ = 0;
}

SequenceProto::~SequenceProto() {
  // @@protoc_insertion_point(destructor:onnx2trt_onnx.SequenceProto)
  SharedDtor();
}

void SequenceProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SequenceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SequenceProto& SequenceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto.base);
  return *internal_default_instance();
}


void SequenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx2trt_onnx.SequenceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_values_.Clear();
  sparse_tensor_values_.Clear();
  sequence_values_.Clear();
  map_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  elem_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SequenceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onnx2trt_onnx.SequenceProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 elem_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elem_type(&has_bits);
          elem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sparse_tensor_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequence_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .onnx2trt_onnx.MapProto map_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SequenceProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx2trt_onnx.SequenceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.SequenceProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_elem_type(), target);
  }

  // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tensor_values(i), target, stream);
  }

  // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sparse_tensor_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sparse_tensor_values(i), target, stream);
  }

  // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sequence_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sequence_values(i), target, stream);
  }

  // repeated .onnx2trt_onnx.MapProto map_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_map_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx2trt_onnx.SequenceProto)
  return target;
}

size_t SequenceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx2trt_onnx.SequenceProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
  total_size += 1UL * this->_internal_tensor_values_size();
  for (const auto& msg : this->tensor_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
  total_size += 1UL * this->_internal_sparse_tensor_values_size();
  for (const auto& msg : this->sparse_tensor_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
  total_size += 1UL * this->_internal_sequence_values_size();
  for (const auto& msg : this->sequence_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx2trt_onnx.MapProto map_values = 6;
  total_size += 1UL * this->_internal_map_values_size();
  for (const auto& msg : this->map_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 elem_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_elem_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx2trt_onnx.SequenceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SequenceProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx2trt_onnx.SequenceProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx2trt_onnx.SequenceProto)
    MergeFrom(*source);
  }
}

void SequenceProto::MergeFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx2trt_onnx.SequenceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_values_.MergeFrom(from.tensor_values_);
  sparse_tensor_values_.MergeFrom(from.sparse_tensor_values_);
  sequence_values_.MergeFrom(from.sequence_values_);
  map_values_.MergeFrom(from.map_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      elem_type_ = from.elem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SequenceProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx2trt_onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceProto::CopyFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx2trt_onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceProto::IsInitialized() const {
  return true;
}

void SequenceProto::InternalSwap(SequenceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tensor_values_.InternalSwap(&other->tensor_values_);
  sparse_tensor_values_.InternalSwap(&other->sparse_tensor_values_);
  sequence_values_.InternalSwap(&other->sequence_values_);
  map_values_.InternalSwap(&other->map_values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elem_type_, other->elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapProto::InitAsDefaultInstance() {
  ::onnx2trt_onnx::_MapProto_default_instance_._instance.get_mutable()->values_ = const_cast< ::onnx2trt_onnx::SequenceProto*>(
      ::onnx2trt_onnx::SequenceProto::internal_default_instance());
}
class MapProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MapProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::onnx2trt_onnx::SequenceProto& values(const MapProto* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx2trt_onnx::SequenceProto&
MapProto::_Internal::values(const MapProto* msg) {
  return *msg->values_;
}
MapProto::MapProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx2trt_onnx.MapProto)
}
MapProto::MapProto(const MapProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_),
      string_keys_(from.string_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_values()) {
    values_ = new ::onnx2trt_onnx::SequenceProto(*from.values_);
  } else {
    values_ = nullptr;
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:onnx2trt_onnx.MapProto)
}

void MapProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_type_) -
      reinterpret_cast<char*>(&values_)) + sizeof(key_type_));
}

MapProto::~MapProto() {
  // @@protoc_insertion_point(destructor:onnx2trt_onnx.MapProto)
  SharedDtor();
}

void MapProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void MapProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapProto& MapProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapProto_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto.base);
  return *internal_default_instance();
}


void MapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx2trt_onnx.MapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  string_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(values_ != nullptr);
      values_->Clear();
    }
  }
  key_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onnx2trt_onnx.MapProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 key_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_key_type(&has_bits);
          key_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes string_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .onnx2trt_onnx.SequenceProto values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx2trt_onnx.MapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.MapProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_key_type(), target);
  }

  // repeated int64 keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_keys(i), target);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0, n = this->_internal_string_keys_size(); i < n; i++) {
    const auto& s = this->_internal_string_keys(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .onnx2trt_onnx.SequenceProto values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx2trt_onnx.MapProto)
  return target;
}

size_t MapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx2trt_onnx.MapProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 keys = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->keys_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keys_size());
    total_size += data_size;
  }

  // repeated bytes string_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_keys_.size());
  for (int i = 0, n = string_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      string_keys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .onnx2trt_onnx.SequenceProto values = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_);
    }

    // optional int32 key_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_key_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx2trt_onnx.MapProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MapProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx2trt_onnx.MapProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx2trt_onnx.MapProto)
    MergeFrom(*source);
  }
}

void MapProto::MergeFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx2trt_onnx.MapProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  string_keys_.MergeFrom(from.string_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_values()->::onnx2trt_onnx::SequenceProto::MergeFrom(from._internal_values());
    }
    if (cached_has_bits & 0x00000004u) {
      key_type_ = from.key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx2trt_onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapProto::CopyFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx2trt_onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapProto::IsInitialized() const {
  return true;
}

void MapProto::InternalSwap(MapProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  string_keys_.InternalSwap(&other->string_keys_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(values_, other->values_);
  swap(key_type_, other->key_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx2trt_onnx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onnx2trt_onnx::SequenceProto* Arena::CreateMaybeMessage< ::onnx2trt_onnx::SequenceProto >(Arena* arena) {
  return Arena::CreateInternal< ::onnx2trt_onnx::SequenceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx2trt_onnx::MapProto* Arena::CreateMaybeMessage< ::onnx2trt_onnx::MapProto >(Arena* arena) {
  return Arena::CreateInternal< ::onnx2trt_onnx::MapProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
