// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data_onnx2trt_onnx.proto

#include "onnx/onnx-data_onnx2trt_onnx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapProto;
}  // namespace protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto
namespace protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SparseTensorProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TensorProto;
}  // namespace protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto
namespace onnx2trt_onnx {
class SequenceProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SequenceProto>
      _instance;
} _SequenceProto_default_instance_;
class MapProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapProto>
      _instance;
} _MapProto_default_instance_;
}  // namespace onnx2trt_onnx
namespace protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto {
static void InitDefaultsMapProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::onnx2trt_onnx::_SequenceProto_default_instance_;
    new (ptr) ::onnx2trt_onnx::SequenceProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::onnx2trt_onnx::_MapProto_default_instance_;
    new (ptr) ::onnx2trt_onnx::MapProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::onnx2trt_onnx::SequenceProto::InitAsDefaultInstance();
  ::onnx2trt_onnx::MapProto::InitAsDefaultInstance();
}

ONNX_API ::google::protobuf::internal::SCCInfo<2> scc_info_MapProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapProto}, {
      &protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto::scc_info_TensorProto.base,
      &protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto::scc_info_SparseTensorProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapProto.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, elem_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, tensor_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, sparse_tensor_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, sequence_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::SequenceProto, map_values_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, string_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::onnx2trt_onnx::MapProto, values_),
  0,
  2,
  ~0u,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::onnx2trt_onnx::SequenceProto)},
  { 17, 27, sizeof(::onnx2trt_onnx::MapProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::onnx2trt_onnx::_SequenceProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::onnx2trt_onnx::_MapProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "onnx/onnx-data_onnx2trt_onnx.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"onnx/onnx-data_onnx2trt_onnx.proto\022\ron"
      "nx2trt_onnx\032 onnx/onnx_onnx2trt_onnx-ml."
      "proto\"\330\002\n\rSequenceProto\022\014\n\004name\030\001 \001(\t\022\021\n"
      "\telem_type\030\002 \001(\005\0221\n\rtensor_values\030\003 \003(\0132"
      "\032.onnx2trt_onnx.TensorProto\022>\n\024sparse_te"
      "nsor_values\030\004 \003(\0132 .onnx2trt_onnx.Sparse"
      "TensorProto\0225\n\017sequence_values\030\005 \003(\0132\034.o"
      "nnx2trt_onnx.SequenceProto\022+\n\nmap_values"
      "\030\006 \003(\0132\027.onnx2trt_onnx.MapProto\"O\n\010DataT"
      "ype\022\r\n\tUNDEFINED\020\000\022\n\n\006TENSOR\020\001\022\021\n\rSPARSE"
      "_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007\n\003MAP\020\004\"{\n\010MapP"
      "roto\022\014\n\004name\030\001 \001(\t\022\020\n\010key_type\030\002 \001(\005\022\014\n\004"
      "keys\030\003 \003(\003\022\023\n\013string_keys\030\004 \003(\014\022,\n\006value"
      "s\030\005 \001(\0132\034.onnx2trt_onnx.SequenceProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onnx/onnx-data_onnx2trt_onnx.proto", &protobuf_RegisterTypes);
  ::protobuf_onnx_2fonnx_5fonnx2trt_5fonnx_2dml_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto
namespace onnx2trt_onnx {
const ::google::protobuf::EnumDescriptor* SequenceProto_DataType_descriptor() {
  protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::file_level_enum_descriptors[0];
}
bool SequenceProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SequenceProto_DataType SequenceProto::UNDEFINED;
const SequenceProto_DataType SequenceProto::TENSOR;
const SequenceProto_DataType SequenceProto::SPARSE_TENSOR;
const SequenceProto_DataType SequenceProto::SEQUENCE;
const SequenceProto_DataType SequenceProto::MAP;
const SequenceProto_DataType SequenceProto::DataType_MIN;
const SequenceProto_DataType SequenceProto::DataType_MAX;
const int SequenceProto::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SequenceProto::InitAsDefaultInstance() {
}
void SequenceProto::clear_tensor_values() {
  tensor_values_.Clear();
}
void SequenceProto::clear_sparse_tensor_values() {
  sparse_tensor_values_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceProto::kNameFieldNumber;
const int SequenceProto::kElemTypeFieldNumber;
const int SequenceProto::kTensorValuesFieldNumber;
const int SequenceProto::kSparseTensorValuesFieldNumber;
const int SequenceProto::kSequenceValuesFieldNumber;
const int SequenceProto::kMapValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceProto::SequenceProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::scc_info_MapProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx2trt_onnx.SequenceProto)
}
SequenceProto::SequenceProto(const SequenceProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tensor_values_(from.tensor_values_),
      sparse_tensor_values_(from.sparse_tensor_values_),
      sequence_values_(from.sequence_values_),
      map_values_(from.map_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  elem_type_ = from.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx2trt_onnx.SequenceProto)
}

void SequenceProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elem_type_ = 0;
}

SequenceProto::~SequenceProto() {
  // @@protoc_insertion_point(destructor:onnx2trt_onnx.SequenceProto)
  SharedDtor();
}

void SequenceProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SequenceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SequenceProto::descriptor() {
  ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SequenceProto& SequenceProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::scc_info_MapProto.base);
  return *internal_default_instance();
}


void SequenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx2trt_onnx.SequenceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_values_.Clear();
  sparse_tensor_values_.Clear();
  sequence_values_.Clear();
  map_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  elem_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SequenceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx2trt_onnx.SequenceProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onnx2trt_onnx.SequenceProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 elem_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_elem_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tensor_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sparse_tensor_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sequence_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .onnx2trt_onnx.MapProto map_values = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx2trt_onnx.SequenceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx2trt_onnx.SequenceProto)
  return false;
#undef DO_
}

void SequenceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx2trt_onnx.SequenceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.SequenceProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elem_type(), output);
  }

  // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tensor_values(static_cast<int>(i)),
      output);
  }

  // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sparse_tensor_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sparse_tensor_values(static_cast<int>(i)),
      output);
  }

  // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->sequence_values(static_cast<int>(i)),
      output);
  }

  // repeated .onnx2trt_onnx.MapProto map_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->map_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:onnx2trt_onnx.SequenceProto)
}

::google::protobuf::uint8* SequenceProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:onnx2trt_onnx.SequenceProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.SequenceProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elem_type(), target);
  }

  // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tensor_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sparse_tensor_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sparse_tensor_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->sequence_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated .onnx2trt_onnx.MapProto map_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->map_values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx2trt_onnx.SequenceProto)
  return target;
}

size_t SequenceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx2trt_onnx.SequenceProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .onnx2trt_onnx.TensorProto tensor_values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tensor_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tensor_values(static_cast<int>(i)));
    }
  }

  // repeated .onnx2trt_onnx.SparseTensorProto sparse_tensor_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sparse_tensor_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sparse_tensor_values(static_cast<int>(i)));
    }
  }

  // repeated .onnx2trt_onnx.SequenceProto sequence_values = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sequence_values(static_cast<int>(i)));
    }
  }

  // repeated .onnx2trt_onnx.MapProto map_values = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->map_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_values(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 elem_type = 2;
    if (has_elem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elem_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx2trt_onnx.SequenceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx2trt_onnx.SequenceProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx2trt_onnx.SequenceProto)
    MergeFrom(*source);
  }
}

void SequenceProto::MergeFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx2trt_onnx.SequenceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_values_.MergeFrom(from.tensor_values_);
  sparse_tensor_values_.MergeFrom(from.sparse_tensor_values_);
  sequence_values_.MergeFrom(from.sequence_values_);
  map_values_.MergeFrom(from.map_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      elem_type_ = from.elem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SequenceProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx2trt_onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceProto::CopyFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx2trt_onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceProto::IsInitialized() const {
  return true;
}

void SequenceProto::Swap(SequenceProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceProto::InternalSwap(SequenceProto* other) {
  using std::swap;
  CastToBase(&tensor_values_)->InternalSwap(CastToBase(&other->tensor_values_));
  CastToBase(&sparse_tensor_values_)->InternalSwap(CastToBase(&other->sparse_tensor_values_));
  CastToBase(&sequence_values_)->InternalSwap(CastToBase(&other->sequence_values_));
  CastToBase(&map_values_)->InternalSwap(CastToBase(&other->map_values_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elem_type_, other->elem_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SequenceProto::GetMetadata() const {
  protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapProto::InitAsDefaultInstance() {
  ::onnx2trt_onnx::_MapProto_default_instance_._instance.get_mutable()->values_ = const_cast< ::onnx2trt_onnx::SequenceProto*>(
      ::onnx2trt_onnx::SequenceProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapProto::kNameFieldNumber;
const int MapProto::kKeyTypeFieldNumber;
const int MapProto::kKeysFieldNumber;
const int MapProto::kStringKeysFieldNumber;
const int MapProto::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapProto::MapProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::scc_info_MapProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:onnx2trt_onnx.MapProto)
}
MapProto::MapProto(const MapProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      keys_(from.keys_),
      string_keys_(from.string_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_values()) {
    values_ = new ::onnx2trt_onnx::SequenceProto(*from.values_);
  } else {
    values_ = NULL;
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:onnx2trt_onnx.MapProto)
}

void MapProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_type_) -
      reinterpret_cast<char*>(&values_)) + sizeof(key_type_));
}

MapProto::~MapProto() {
  // @@protoc_insertion_point(destructor:onnx2trt_onnx.MapProto)
  SharedDtor();
}

void MapProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void MapProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapProto::descriptor() {
  ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapProto& MapProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::scc_info_MapProto.base);
  return *internal_default_instance();
}


void MapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx2trt_onnx.MapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  string_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(values_ != NULL);
      values_->Clear();
    }
  }
  key_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onnx2trt_onnx.MapProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onnx2trt_onnx.MapProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_key_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_keys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes string_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .onnx2trt_onnx.SequenceProto values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onnx2trt_onnx.MapProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onnx2trt_onnx.MapProto)
  return false;
#undef DO_
}

void MapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onnx2trt_onnx.MapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.MapProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_type(), output);
  }

  // repeated int64 keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->keys(i), output);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0, n = this->string_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->string_keys(i), output);
  }

  // optional .onnx2trt_onnx.SequenceProto values = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:onnx2trt_onnx.MapProto)
}

::google::protobuf::uint8* MapProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:onnx2trt_onnx.MapProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onnx2trt_onnx.MapProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key_type(), target);
  }

  // repeated int64 keys = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->keys_, target);

  // repeated bytes string_keys = 4;
  for (int i = 0, n = this->string_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->string_keys(i), target);
  }

  // optional .onnx2trt_onnx.SequenceProto values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_values(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx2trt_onnx.MapProto)
  return target;
}

size_t MapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx2trt_onnx.MapProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 keys = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->keys_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keys_size());
    total_size += data_size;
  }

  // repeated bytes string_keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_keys_size());
  for (int i = 0, n = this->string_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_keys(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .onnx2trt_onnx.SequenceProto values = 5;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *values_);
    }

    // optional int32 key_type = 2;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onnx2trt_onnx.MapProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MapProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onnx2trt_onnx.MapProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onnx2trt_onnx.MapProto)
    MergeFrom(*source);
  }
}

void MapProto::MergeFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx2trt_onnx.MapProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  string_keys_.MergeFrom(from.string_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_values()->::onnx2trt_onnx::SequenceProto::MergeFrom(from.values());
    }
    if (cached_has_bits & 0x00000004u) {
      key_type_ = from.key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onnx2trt_onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapProto::CopyFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx2trt_onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapProto::IsInitialized() const {
  return true;
}

void MapProto::Swap(MapProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapProto::InternalSwap(MapProto* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  string_keys_.InternalSwap(CastToBase(&other->string_keys_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(values_, other->values_);
  swap(key_type_, other->key_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapProto::GetMetadata() const {
  protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_onnx_2fonnx_2ddata_5fonnx2trt_5fonnx_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx2trt_onnx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::onnx2trt_onnx::SequenceProto* Arena::CreateMaybeMessage< ::onnx2trt_onnx::SequenceProto >(Arena* arena) {
  return Arena::CreateInternal< ::onnx2trt_onnx::SequenceProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::onnx2trt_onnx::MapProto* Arena::CreateMaybeMessage< ::onnx2trt_onnx::MapProto >(Arena* arena) {
  return Arena::CreateInternal< ::onnx2trt_onnx::MapProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
